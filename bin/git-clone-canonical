#!/usr/bin/env python
import os
import subprocess
import sys
import time


AUTO_UPDATE_AGE = 86400 * 7
GCC_REPO_URL='git://github.com/rconradharris/git-clone-canonical'
GCC_REPO_PATH = os.path.expanduser('~/.git-clone-canonical')
LOCATIONS_PATH = os.path.join(GCC_REPO_PATH, '.locations.txt')


class Repo(object):
    def __init__(self, name, location, keywords=None, lang=None, rcs='git'):
        self.name = name
        self.location = location
        self.rcs = rcs

        if isinstance(keywords, basestring):
            keywords = set(keywords.split(','))

        self.keywords = keywords or set()

        if isinstance(lang, basestring):
            lang = set(lang.split(','))

        self.lang = lang or set()

    def to_locations_line(self):
        parts = [self.name, self.location]

        if self.keywords:
            parts.append('KEYWORDS=%s' % ','.join(sorted(self.keywords)))

        if self.lang:
            parts.append('LANG=%s' % ','.join(sorted(self.lang)))

        if self.rcs != 'git':
            parts.append('RCS=%s' % self.rcs)

        return ' '.join(parts)

    @classmethod
    def from_locations_line(cls, line):
        parts = line.split()

        repo_kwargs = {}
        for meta_string in parts[2:]:
            key, value = meta_string.split('=')
            repo_kwargs[key.lower()] = value

        return cls(parts[0], parts[1], **repo_kwargs)

    @classmethod
    def from_file(cls, path):
        name = os.path.basename(path)
        location_seen = False
        repo_kwargs = {}
        with open(path) as f:
            for line in f:
                line = line.strip()
                if location_seen:
                    key, value = line.split('=')
                    repo_kwargs[key.lower()] = value
                else:
                    location_seen = True
                    location = line

        return cls(name, location, **repo_kwargs)

    def to_file(self, path):
        with open(path, 'w') as f:
            f.write('%s\n' % self.location)
            if self.keywords:
                f.write('KEYWORDS=%s\n' % ','.join(sorted(self.keywords)))
            if self.lang:
                f.write('LANG=%s\n' % ','.join(sorted(self.lang)))
            if self.rcs != 'git':
                f.write('RCS=%s\n' % self.rcs)

    @property
    def languages(self):
        return map(str.upper, sorted(self.lang))

    def __repr__(self):
        return '<Repo %s>' % self.name


def _check_auto_update():
    age = time.time() - os.path.getmtime(LOCATIONS_PATH)

    # Touch file to record that we checked
    os.utime(LOCATIONS_PATH, None)

    if age > AUTO_UPDATE_AGE:
        print 'Out-of-date locations.txt detected. Auto-updating...'
        update()


def _rebuild_locations_file():
    dirname = os.path.join(GCC_REPO_PATH, 'repos')
    with open(LOCATIONS_PATH, 'w') as f:
        # NOTE: the sorted is needed because listdir may give us a
        # case-insensitve sort (d E f) instead of what we want (E d f)
        for basename in sorted(os.listdir(dirname)):
            path = os.path.join(dirname, basename)
            repo = Repo.from_file(path)
            line = repo.to_locations_line()
            f.write('%s\n' % line)


def _get_all_repos():
    with open(LOCATIONS_PATH) as f:
        for line in f:
            line = line.strip()
            if line:
                yield Repo.from_locations_line(line)


def _clone_git(repo):
    subprocess.check_call(['git', 'clone', repo.location])


def _clone_hg(repo):
    if subprocess.call(['which', 'hg']) == 0:
        print 'This project uses Mercurial (hg). Cloning using hg...'
        subprocess.check_call(['hg', 'clone', repo.location])
    else:
        print 'This project uses Mercurial (hg) which does not appear to be'\
              ' installed. After '
        print 'installing hg, you can clone it using:\n'
        print 'hg clone %s' % repo.location


def clone(name):
    repo = None
    for repo_ in _get_all_repos():
        if repo_.name == name:
            repo = repo_

    if not repo:
        print >> sys.stderr, "No match found for '%s'" % name
        sys.exit(1)


    clone_func = globals().get('_clone_%s' % repo.rcs)
    if clone_func:
        clone_func(repo)
    else:
        print >> sys.stderr, "Unrecognized RCS type '%s'" % repo.rcs
        sys.exit(1)


def search(substring):
    substring = substring.lower()
    count = 0
    for repo in _get_all_repos():
        if substring in repo.name or substring in repo.keywords:
            parts = [repo.name]

            if repo.lang:
                parts.append('(%s)' % ', '.join(repo.languages))

            parts.append(repo.location)
            print ' '.join(parts)

            count += 1

    match = 'matches' if count > 1 else 'match'
    print '%d %s found' % (count, match)


def update():
    if os.path.exists(GCC_REPO_PATH):
        # TODO: ensure clean working directory
        cwd = os.getcwd()
        os.chdir(GCC_REPO_PATH)
        try:
            subprocess.check_call(['git', 'pull', 'origin'])
        finally:
            os.chdir(cwd)
    else:
        subprocess.check_call(['git', 'clone', GCC_REPO_URL, GCC_REPO_PATH])

    _rebuild_locations_file()
    print 'Updated'


def main():
    if '--update' in sys.argv:
        update()
        return

    if not os.path.exists(GCC_REPO_PATH):
        print >> sys.stderr, "Run git-clone-canonical --update first"
        sys.exit(1)

    _check_auto_update()

    if '--search' in sys.argv:
        search(sys.argv[-1])
        return

    if len(sys.argv) < 2:
        print >> sys.stderr, 'usage: git clone-canonical <name>'
        print >> sys.stderr, '       git clone-canonical --update'
        print >> sys.stderr, '       git clone-canonical --search <substring>'
        sys.exit(1)

    clone(sys.argv[1])


if __name__ == '__main__':
    main()
