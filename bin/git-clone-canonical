#!/usr/bin/env python
import os
import subprocess
import sys
import time


AUTO_UPDATE_AGE = 86400 * 7
GCC_REPO_URL='git://github.com/rconradharris/git-clone-canonical'
GCC_REPO_PATH = os.path.expanduser('~/.git-clone-canonical')


class Repo(object):
    def __init__(self, name, location, rcs='git', keywords=None):
        self.name = name
        self.location = location
        self.rcs = rcs

        if isinstance(keywords, basestring):
            keywords = set(keywords.split(','))

        self.keywords = keywords or set()

    @property
    def search_terms(self):
        return set([self.name]) | self.keywords

    def __repr__(self):
        return '<Repo %s>' % self.name


def _check_auto_update():
    path = os.path.join(GCC_REPO_PATH, 'locations.txt')
    age = time.time() - os.path.getmtime(path)

    # Touch file to record that we checked
    os.utime(path, None)

    if age > AUTO_UPDATE_AGE:
        print 'Out-of-date locations.txt detected. Auto-updating...'
        update()


def _location_lines():
    path = os.path.join(GCC_REPO_PATH, 'locations.txt')
    with open(path) as f:
        for line in f:
            line = line.strip()
            if line:
                yield line


def _repos():
    for line in _location_lines():
        parts = line.split()

        repo_kwargs = {}
        for meta_string in parts[2:]:
            key, value = meta_string.split('=')
            repo_kwargs[key.lower()] = value

        yield Repo(parts[0], parts[1], **repo_kwargs)


def _clone_git(repo):
    subprocess.check_call(['git', 'clone', repo.location])


def binary_exists(name):
    return subprocess.call(['which', name]) == 0


def _clone_hg(repo):
    if binary_exists('hg'):
        print 'This project uses Mercurial (hg). Cloning using hg...'
        subprocess.check_call(['hg', 'clone', repo.location])
    else:
        print 'This project uses Mercurial (hg) which does not appear to be'\
              ' installed. After '
        print 'installing hg, you can clone it using:\n'
        print 'hg clone %s' % repo.location


def clone(name):
    repo = None
    for repo_ in _repos():
        if repo_.name == name:
            repo = repo_

    if not repo:
        print >> sys.stderr, "No match found for '%s'" % name
        sys.exit(1)


    clone_func = globals().get('_clone_%s' % repo.rcs)
    if clone_func:
        clone_func(repo)
    else:
        print >> sys.stderr, "Unrecognized RCS type '%s'" % repo.rcs
        sys.exit(1)


def search(substring):
    count = 0
    for repo in _repos():
        if substring.lower() in repo.search_terms:
            print repo.name, repo.location
            count += 1

    match = 'matches' if count > 1 else 'match'
    print '%d %s found' % (count, match)


def update():
    if os.path.exists(GCC_REPO_PATH):
        # TODO: ensure clean working directory
        cwd = os.getcwd()
        os.chdir(GCC_REPO_PATH)
        try:
            subprocess.check_call(['git', 'pull', 'origin'])
        finally:
            os.chdir(cwd)
    else:
        subprocess.check_call(['git', 'clone', GCC_REPO_URL, GCC_REPO_PATH])

    print 'Updated'


def main():
    if '--update' in sys.argv:
        update()
        return

    if not os.path.exists(GCC_REPO_PATH):
        print >> sys.stderr, "Run git-clone-canonical --update first"
        sys.exit(1)

    _check_auto_update()

    if '--search' in sys.argv:
        search(sys.argv[-1])
        return

    if len(sys.argv) < 2:
        print >> sys.stderr, 'usage: git clone-canonical <name>'
        print >> sys.stderr, '       git clone-canonical --update'
        print >> sys.stderr, '       git clone-canonical --search <substring>'
        sys.exit(1)

    clone(sys.argv[1])


if __name__ == '__main__':
    main()
